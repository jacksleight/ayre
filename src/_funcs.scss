/* Sizes */

@function ayre-sizes($auto: null, $sizes: null) {
    @if type-of($auto) == map {
        $sizes: $auto;
        $auto: null;
    }
    @if $sizes == null {
        $sizes: ();
    }
    $parsed: ();
    @if $auto != null {
        $span:  ayre-span($auto);
        $total: ayre-span-total($span);
        @for $i from $total * 2 through $ayre-limit {
            @if unitless($total) == false or $i % $total == 0 {
                $parsed: map-merge($parsed, ($i to 0 auto: (null: $span)));
            }
        }
    }
    @each $range, $selectors in $sizes {
        $range: ayre-range($range);
        @if $selectors == null {
            @if map-has-key($parsed, $range) {
                $parsed: map-remove($parsed, $range);
            }
        } @else {
            @if type-of($selectors) != map and length($selectors) > 0 {
                $selectors: (null: $selectors);
            }
            $parsed: map-merge($parsed, ($range: $selectors));
        }
    }
    @return $parsed;
}

/* Points */

@function ayre-points() {
    $measures: ();
    @for $i from 1 through $ayre-limit {
        $measure:
            ($ayre-unit * $i) +
            $ayre-extra;
        $measures: append($measures, $measure);
    }
    $points: ();
    @for $i from 1 through $ayre-limit {
        $min: nth($measures, $i);
        $max: 0;
        @if length($measures) > $i {
            $max: nth($measures, $i + 1) - 1;
        }
        $points: map-merge($points, ($i: $min $max));
    }
    @return $points;
}

/* Measure */

@function ayre-measure-min($measure) {
    $value: nth($measure, 1);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}
@function ayre-measure-max($measure) {
    $value: nth($measure, 2);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}

/* Span */

@function ayre-span($span) {
    @if $span == null {
        @return null;
    }
    $width: 0;
    $left:  0;
    $right: 0;
    $scale: 0;
    $break: false;
    @for $i from 1 through length($span) {
        @if $break == false {
            @if nth($span, $i) == of {
                $scale: nth($span, $i + 1);
                $break: true;
            } @elseif $i == 1 {
                $width: nth($span, $i);
            } @elseif $i == 2 {
                $left: nth($span, $i);
            } @elseif $i == 3 {
                $right: nth($span, $i);
            }
        }
    }
    $span: $width $left $right of $scale;
    @return $span;
}
@function ayre-span-width($span) {
    $value: nth($span, 1);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}
@function ayre-span-left($span) {
    $value: nth($span, 2);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}
@function ayre-span-right($span) {
    $value: nth($span, 3);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}
@function ayre-span-scale($span) {
    $value: nth($span, 5);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}
@function ayre-span-total($span) {
    $value: nth($span, 1) + nth($span, 2) + nth($span, 3);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}
@function ayre-span-width-length($range, $span) {
    $span: ayre-span($span);
    @return ayre-span-length($range, nth($span, 1) of nth($span, 5));
}
@function ayre-span-left-length($range, $span) {
    $span: ayre-span($span);
    @return ayre-span-length($range, nth($span, 2) of nth($span, 5));
}
@function ayre-span-right-length($range, $span) {
    $span: ayre-span($span);
    @return ayre-span-length($range, nth($span, 3) of nth($span, 5));
}
@function ayre-span-length($range, $span) {
    @if $span == null {
        @return null;
    }
    $span:   ayre-span($span);
    $length: ayre-span-width($span);
    @if $length == null {
        @return null;
    }
    @if type-of($length) == number and unitless($length) {
        $scale: ayre-span-scale($span);
        @if $scale == null {
            $scale: ayre-range-min($range);
        }
        $length: percentage($length / $scale);
    }
    @return $length;
}

/* Range */

@function ayre-range($range) {
    @if $range == null {
        @return null;
    }
    $min:   1;
    $max:   0;
    $type:  user;
    $break: false;
    @for $i from 1 through length($range) {
        @if $break == false {
            @if nth($range, $i) == user or nth($range, $i) == auto {
                $type: nth($range, $i);
                $break: true;
            } @elseif $i == 1 {
                $min: nth($range, $i);
            } @elseif $i == 3 {
                $max: nth($range, $i);
            }
        }
    }
    $range: $min to $max $type;
    @return $range;
}
@function ayre-range-min($range) {
    $value: nth($range, 1);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}
@function ayre-range-max($range) {
    $value: nth($range, 3);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}

/* Gutters */

@function ayre-gutters($gutters) {
    @if $gutters == null {
        $gutters: $ayre-gutters;
    }
    @if length($gutters) == 1 {
        $gutters: append($gutters, nth($gutters, 1));
    }
    @return $gutters;
}
@function ayre-gutters-x($gutters) {
    $value: nth($gutters, 1);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}
@function ayre-gutters-y($gutters) {
    $value: nth($gutters, 2);
    @if $value == 0 {
        @return null;
    }
    @return $value;
}